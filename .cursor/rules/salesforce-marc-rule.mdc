---
description:
globs: *.cls,*.js,*.css,*.cmp,*.html
alwaysApply: false
---
<!-- Author: Marc Pla, IBM Consulting, February 2025 -->
# **Instructions**

## **Code Style and Structure**

### **General Guidelines both for generating code and reviewing code**
- Ensure code is clear, maintainable, and scalable.
- Use camelCase for variables and PascalCase for classes.
- Indentation should be with tabs.
- Write the least amount of code while ensuring readability and maintainability.

	For example, instead of:
	```apex
	private static String concatenate(String s1, String s2) {
		String aux = s1 + s2;
		return aux;
	}
	```
	use:
	```apex
	private static String concatenate(String s1, String s2) {
		return s1 + s2;
	}
	```
- Avoid consecutive empty lines in the code when they don't improve readability.

### **Initializing Data Structures**
-   When initializing Apex Lists, Apex Maps, JS objects, or similar data structures, prioritize including elements directly in the constructor unless this reduces readability. For example:
	- In Apex, instead of:
		```apex
		List<String> names = new List<String>();
		names.add('Alice');
		names.add('Bob');
		```
		use:
		```apex
		List<String> names = new List<String>{'Alice', 'Bob'};
		```
	- And in JS, instead of:
		```javascript
		const user = {};
		user.name = 'Alice';
		user.age = 30;
		```
		use:
		```javascript
		const user = {name: 'Alice', age: 30};
		```
	- However, if adding elements in the constructor reduces readability (e.g., too complex nested structures), prefer separate assignments.

	Exception for SObjects
	-   **When creating instances of SObjects in Apex, all properties must be assigned separately, except for `Id`, which should always be set in the constructor if present.**
		For example, instead of:
		```apex
		Account acc = new Account();
		acc.Id = '001XXXXXXXXXXXX';
		acc.Name = 'Acme Corp';
		acc.Industry = 'Technology';
		```
		**use:**
		```apex
		Account acc = new Account(Id = '001XXXXXXXXXXXX');
		acc.Name = 'Acme Corp';
		acc.Industry = 'Technology';
		```
		**This ensures consistency when updating records while keeping property assignments explicit.**

### **Formatting Rules**
-   **Follow these ESLint rules when writing JS and Apex code to enforce consistent formatting:**
	- `"no-extra-parens"`
	- `"no-extra-semi"`
	- `"no-irregular-whitespace"`
	- `"no-unexpected-multiline"`
	- `"block-scoped-var"`
	- `"no-empty-function"`
	- `"no-useless-concat"`
	- `"no-useless-return"`
	- `"no-undefined"`
	- `"no-unused-vars"`
	- `"array-bracket-spacing"`
	- `"block-spacing"`
	- `"space-in-parens"`
	- `"no-whitespace-before-property"`
	- `"no-mixed-spaces-and-tabs"`
	- `"new-cap"`
	- `"space-infix-ops"`
	- `"comma-spacing"`
	- `"space-before-function-paren"`
	- `"space-before-blocks"`
	- `"keyword-spacing"` (with options `{"before": true, "after": true}`)
	- `"single-quote"`
	- `"no-empty"`
	- `"curly"`
	- `"brace-style"` (with options `{"allowSingleLine": true}`)

	#### **Keyword Spacing**
	-   **Ensure `keyword-spacing` is always applied in both JS and Apex, so spaces must be included:**
		-   **Before and after control flow keywords (`if`, `else`, `for`, `while`, etc.)**
		-   **Before opening parentheses**
		-   **After closing parentheses**

		**For example, in Apex:**
		**Incorrect formatting:**
		```apex
		if(condition){
			System.debug('Incorrect spacing');
		}

		for(Integer i=0;i<10;i++){
			System.debug(i);
		}

		while(x<100){
			x++;
		}
		```

		**Correct formatting:**
		```apex
		if (condition) {
			System.debug('Correct spacing');
		}

		for (Integer i = 0; i < 10; i++) {
			System.debug(i);
		}

		while (x < 100) {
			x++;
		}
		```
		**This example demonstrates `keyword-spacing`, but all other ESLint rules must also be strictly followed.**
	- **Ensure `curly` is always applied in both JS and Apex, so one-line conditionals must be avoided except for ternary operators.**

### **Apex guidelines**
- **Avoid SOQL queries inside loops, as well as SOQL queries that are not strictly necessary. Remove the already defined unnecessary SOQL queries.**
- **Avoid selecting `Id` field unless it it's the only field.**
- **Keep SOQL queries compact and readable with the minimum number of lines possible (maximum line length of around 80 characters). Use uppercase for SOQL keywords.**

	**Incorrect formatting:**
	```apex
	List<CBK_OTP_Generado__c> lstOTPGenerado = [Select CBK_Oportunidad__c, CBK_Oportunidad__r.Account.Name, CBK_Oportunidad__r.AccountId from CBK_OTP_Generado__c where CBK_Codigo_OTP__c in :setOTP];
	```
	**Correct formatting:**
	```apex
	List<CBK_OTP_Generado__c> lstOTPGenerado = [SELECT CBK_Fecha_Codigo_OTP__c, CBK_Oportunidad__c,
												CBK_Oportunidad__r.Account.Name, CBK_Oportunidad__r.AccountId
												WHERE CBK_Codigo_OTP__c IN :setOTP];
	```

- **Replace all `System.debug()` calls inside clear exception-handling blocks with `CBK_Log.error(Exception e)`, and remove any remaining `System.debug()` calls if they are clearly development traces.**
- **Avoid using global and static variables when possible. Remove the already defined global and static variables.**
- **Avoid using Javadoc or similar documentation comments (comments with @param, @return, @description, etc.) both at class and method level. Remove the already defined ones.**

### **Lightning Web Components & JavaScript guidelines**
- **Maximize the use of native Salesforce base components (`lightning-button`, `lightning-input`, etc.) and Salesforce Lightning Design System patterns in Lightning Components (`slds-grid`, `slds-form-element`, etc.).**
- **Use `uiRecordApi`** (`getRecord`, `getFieldValue`, `updateRecord`, etc.) to fetch data minimizing server calls, importing field definitions from `@salesforce/schema` in LWC.**
- **Use modern JS ES6+ features** (arrow functions, destructuring, template literals, etc.) **to write concise and maintainable code. Prefer modern syntax over older alternatives whenever applicable.**